@mixin break-point($veri, $tip: max) {
    $veri-tipi: type-of($veri);
    $break-point: null;
    
    @if $veri-tipi == number{
        @media screen and (#{$tip}-width: #{$veri}) {
            @content;
        }
    }@else if $veri-tipi == string{
        
        @each $deger, $index in $points{
            @if $veri == $deger{
                $break-point: $index;
            }
        }
        
        @if $break-point != null {
            @media screen and (#{$tip}-width: #{$break-point}#{$prefix}) {
                @content;
            }
        } @else {
            @warn "Hatalı breakpoint değeri";
            /* 
                !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                Hatalı breakpoint değeri 
                !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            */
        }
    }
}

@mixin font-size($size, $rem: 1) {
    font-size: $size * 1px;
    font-size: em-hesapla($size, $rem);
}

/* 
    @mixin flex($degerler...) {
        @debug meta.keywords($degerler);

        display: flex;
        @each $ozellik, $deger in meta.keywords($degerler) {
            # {$ozellik}: $deger; // baştaki boşluğu kaldır açarken
        }
    } 
*/

@mixin flex {
    display: flex;
    @content;
}

@mixin font-face($name, $file) {
    @font-face {
        font-family: "#{$name}";
        src: url("../fonts/#{$file}.eot");
        src: url("../fonts/#{$file}.eot?#iefix") format("embedded-opentype"),
        url("../fonts/#{$file}.woff") format("woff"),
        url("../fonts/#{$file}.ttf") format("truetype"),
        url("../fonts/#{$file}.svg?#webfont") format("svg");
    }
}